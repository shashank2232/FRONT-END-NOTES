JAVASCRIPT 
TO PRACTICE JAVASCRIPT ONLINE, GO TO GOOGLE.COM , OPEN INSPECT , GO TO CONSOLE AND WRITE CODES THERE TO PRACTICE.
TO DIRECTLY OPEN CONSOLE ( CTRL + SHIFT + I )

JavaScript is the world's most popular programming language.  JavaScript is the programming language of the Web.  JavaScript is easy to learn.

-> FOR PRINTING:
   console.log("Hello")
   alert("Hello")
-> TO CLLEAR SCREEN
   console.clear()   OR  CTRL+L
-> alert("HELLO");    Here alert is a function, HELLO is a message to be displayed and ; is end.

(1) DECLARING VARIABLES (let & var)  (Variables defined with let cannot be redeclared, but can be done using var.)
The let keyword tells the browser to create variables:
let x, y;  x = 5 + 6;  y = x * 10;  
let x = 5; let y = 6; let z = x + y;

The var keyword also tells the browser to create variables:
var x, y;  x = 5 + 6;  y = x * 10;
var x = 5;  var y = 6; var z = x + y;

--> If you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.

4 Ways to Declare a JavaScript Variable:
Using var
Using let
Using const
Using nothing

var x = 10;
// Here x is 10
{
var x = 2;
// Here x is 2
}
// Here x is 2

let x = 10;
// Here x is 10
{
let x = 2;
// Here x is 2
}
// Here x is 10

EG: carName = "Volvo";
var carName;

UNDECLARED VARIABLES: 
x = 5; y = 6; z = x + y;

CONSTANT VARIABLES:
const price1 = 5;  const price2 = 6;

JavaScript Types are DYNAMIC
JavaScript has dynamic types. This means that the same variable can be used to hold different data types:
Example
let x;           // Now x is undefined
x = 5;           // Now x is a Number
x = "John";      // Now x is a String

One Statement, Many Variables :
let person = "John Doe", carName = "Volvo", price = 200;

--> prompt("What is your name?")   will ask you to give INPUT your name.

--> String length : 
var tweet = prompt("Tell us more:")
var tweetCount = tweet.length
alert("You have written " + tweetCount + " characters,you have " + (140 - tweetCount) + " characters left!");

--> SLICING STRING (0-indexing): 
var name = "shashank"
name.slice(0,1)                   // O.P. 's'

Eg: We are taking a comment and show only 140 characters of that comment,not more than that.
var tweet = prompt("Comment:")
var tweetUnder40 = tweet.slice(0,140)
alert(tweet)

--> CHANGING CASE IN STRINGS:
var name = "shashank"
name = name.toUpperCase()
// THIS WILL CHANGE OUR WHOLE STRING TO UPPER CASE

var name = "SHASHANK"
name = name.LowerCase()
// THIS WILL CHANGE OUR WHOLE STRING TO LOWER CASE

(2) JavaScript Comments
Not all JavaScript statements are "executed".  Code after double slashes // or between /* and */ is treated as a comment.

(3) LET & VAR VARIABLE:
Variables defined with let cannot be Redeclared.  Variables defined with let must be Declared before use.  Variables defined with let have Block Scope.

NOTE: WITH VAR WE CAN REDECLARE A VARIABLE BUT WITH LET WE CAN'T REDECLARE A VARIABLE.
let x = "John Doe";  let x = 0;
// SyntaxError: 'x' has already been declared

var x = "John Doe";
var x = 0;
// NO ERROR

FOR LET Variables declared inside a { } block cannot be accessed from outside the block:
{
  let x = 2;
}
// x can NOT be used here

FOR VAR Variables declared with the var keyword can NOT have block scope. Variables declared inside a { } block can be accessed from outside the block.
{
  var x = 2;
}
// x CAN be used here

FOR VAR :
Variables defined with var are hoisted to the top and can be initialized at any time.
Meaning: You can use the variable before it is declared:

carName = "Volvo";
var carName;
// THIS WILL WORK FINE

FOR LET :
Variables defined with let are also hoisted to the top of the block, but not initialized.
Meaning: Using a let variable before it is declared will result in a ReferenceError:

carName = "Saab";
let carName = "Volvo";
// ERROR

(4) CONST VARIABLE:
Variables defined with const cannot be Redeclared. Variables defined with const cannot be Reassigned. Variables defined with const have Block Scope.
Cannot be Reassigned
Example
const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error

Must be Assigned
JavaScript const variables must be assigned a value when they are declared:
Correct
const PI = 3.14159265359;

Incorrect
const PI;
PI = 3.14159265359;

USING * & = TOGETHER:
**=	x **= y	x = x ** y

(5) DATA TYPES :
i. ARRAYS
JavaScript arrays are written with square brackets. Array items are separated by commas.
Example
const cars = ["Saab", "Volvo", "BMW"];

Array indexes are zero-based, which means the first item is [0], second is [1], and so on.

ii. OBJECTS
JavaScript objects are written with curly braces {}.  Object properties are written as name:value pairs, separated by commas.
Example
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

-> TO REMOVE DECIMALS (MATH.FLOOR())

function getMilk(bottles)
{
    var cost = Math.floor(bottles / 1.5);                  // Will return 13,without floor it'll return 13.3333
    console.log(cost);
}
getMilk(20);

(6) TO PRINT SOMETHING:
alert("Hello");
console.log("Hello");
// document.write("Hello");   to write in document of webpage(DOM Manipulation)


(7) FUNCTIONS IN JAVASCRIPT:
Functions are a series of instructions that have a package of codes so that we don't have to write same code again and again.
// CREATION OF FUNCTION
function getMilk(){
alert("leaveHouse");
alert("moveLeft");
alert("moveRight");
alert("enterHouse");
}

// CALLING A FUNCTION
getMilk();

--> To Replace all "alert" with "console.log" :
Press CTRL + F , then type "alert" and at the replace option type "console.log" and click on replace all.

--> DIFFERENCE B/W ALERT & CONSOLE.LOG
alert will make output come on window screen through pop-up whereas console.log will show all output in the CONSOLE(it is only for the developer & not shown to the user).

--> FUNCTIONS WITH PARAMETERS:
To convert numbers with decimals into numbers with no decimal:  (Math.floor())

var x = 3.3333
x = Math.floor(x);        // gives 3

--> OUTPUT & RETURN VALUES IN FUNCTIONS:
Return from a function ->

var change = getMoney(4);
console.log(change);

function getMoney(money) {
    return money/2;
}
// O.P.  2

-> FOR ROUND OFF(3.5 to 4 , 3.4 to 3)
var x = 3.4
x = Math.round(x)

































